'use client';
import { useState } from 'react';
import Link from 'next/link';
import { Home, CheckCircle, XCircle } from 'lucide-react';

const questions = [
    {
        question: "Which of the following is a valid production rule in a CSG?",
        options: [
            "aAb → ab",
            "A → ε",
            "S → AB|BA",
            "aA → Aa"
        ],
        correct: 0,
        explanation: "In CSGs, production rules can have terminals and non-terminals on both sides with certain restrictions."
    },
    {
        question: "What is the main characteristic of Context-Sensitive Grammars?",
        options: [
            "The length of the right-hand side must be less than the left-hand side",
            "The length of the right-hand side must be greater than or equal to the left-hand side",
            "Both sides must have equal length",
            "The right-hand side can only contain terminals"
        ],
        correct: 1,
        explanation: "CSGs must have RHS length ≥ LHS length (non-contracting property)."
    },
    {
        question: "Which language is context-sensitive but not context-free?",
        options: [
            "anbn",
            "anbncn",
            "a*b*",
            "palindromes"
        ],
        correct: 1,
        explanation: "anbncn is a classic example of a CSL that cannot be generated by a CFG."
    },
    {
        question: "What is the closure property of CSLs under intersection?",
        options: [
            "Not closed",
            "Closed only for regular languages",
            "Closed",
            "Closed only for finite languages"
        ],
        correct: 2,
        explanation: "Context-sensitive languages are closed under intersection."
    },
    {
        question: "Which mechanism recognizes exactly the set of CSLs?",
        options: [
            "Pushdown Automata",
            "Linear Bounded Automata",
            "Finite Automata",
            "Turing Machine"
        ],
        correct: 1,
        explanation: "LBAs are the exact recognition mechanism for CSLs."
    },
    {
        question: "What is the time complexity of determining if a CSG generates a given string?",
        options: [
            "Polynomial",
            "Linear",
            "PSPACE-complete",
            "Exponential"
        ],
        correct: 2,
        explanation: "The membership problem for CSGs is PSPACE-complete."
    },
    {
        question: "Which of these properties is true for CSLs?",
        options: [
            "They are always recursive",
            "They are always context-free",
            "They are always regular",
            "They are always recursively enumerable"
        ],
        correct: 0,
        explanation: "All CSLs are recursive languages."
    },
    {
        question: "What is the relationship between CSGs and CFGs?",
        options: [
            "They generate the same languages",
            "CSGs are a subset of CFGs",
            "CFGs are a subset of CSGs",
            "They are incomparable"
        ],
        correct: 2,
        explanation: "Every CFG is a CSG, but not vice versa."
    },
    {
        question: "Which operation is NOT preserved under CSLs?",
        options: [
            "Union",
            "Intersection",
            "Complementation",
            "Non-erasing homomorphism"
        ],
        correct: 2,
        explanation: "CSLs are not closed under complementation."
    },
    {
        question: "What is a monotonic grammar?",
        options: [
            "A grammar where rules can't decrease length",
            "A grammar with only terminal symbols",
            "A grammar with only one non-terminal",
            "A grammar with equal length rules"
        ],
        correct: 0,
        explanation: "Monotonic grammars never decrease string length, which is a property of CSGs."
    }
];

export default function CSGQuiz() {
    const [answers, setAnswers] = useState(new Array(questions.length).fill(null));
    const [revealed, setRevealed] = useState(new Array(questions.length).fill(false));

    const handleAnswer = (questionIndex, optionIndex) => {
        const newAnswers = [...answers];
        newAnswers[questionIndex] = optionIndex;
        setAnswers(newAnswers);

        const newRevealed = [...revealed];
        newRevealed[questionIndex] = true;
        setRevealed(newRevealed);
    };

    const getScore = () => {
        return answers.reduce((score, answer, index) =>
            answer === questions[index].correct ? score + 1 : score, 0
        );
    };

    return (
        <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white p-6">
            <div className="max-w-3xl mx-auto">
                <div className="flex justify-between items-center mb-8">
                    <h1 className="text-3xl font-bold text-blue-900">CSG Quiz</h1>
                    <Link
                        href="/"
                        className="flex items-center gap-2 text-blue-600 hover:text-blue-800"
                    >
                        <Home className="h-5 w-5" />
                        Home
                    </Link>
                </div>

                <div className="space-y-8">
                    {questions.map((q, qIndex) => (
                        <div
                            key={qIndex}
                            className="bg-white rounded-lg shadow-md p-6"
                        >
                            <h3 className="text-xl font-semibold mb-4">{qIndex + 1}. {q.question}</h3>
                            <div className="space-y-3">
                                {q.options.map((option, oIndex) => (
                                    <button
                                        key={oIndex}
                                        onClick={() => handleAnswer(qIndex, oIndex)}
                                        disabled={revealed[qIndex]}
                                        className={`w-full text-left p-3 rounded-lg border transition-colors
                      ${revealed[qIndex]
                                                ? oIndex === q.correct
                                                    ? 'bg-green-100 border-green-500 text-green-800'
                                                    : answers[qIndex] === oIndex
                                                        ? 'bg-red-100 border-red-500 text-red-800'
                                                        : 'bg-gray-50 border-gray-200'
                                                : 'hover:bg-gray-50 border-gray-200'
                                            }
                    `}
                                    >
                                        <div className="flex items-center gap-2">
                                            {revealed[qIndex] && oIndex === q.correct && (
                                                <CheckCircle className="h-5 w-5 text-green-600" />
                                            )}
                                            {revealed[qIndex] && answers[qIndex] === oIndex && oIndex !== q.correct && (
                                                <XCircle className="h-5 w-5 text-red-600" />
                                            )}
                                            {option}
                                        </div>
                                    </button>
                                ))}
                            </div>
                            {revealed[qIndex] && (
                                <div className="mt-4 text-gray-600 bg-gray-50 p-4 rounded-lg">
                                    <strong>Explanation:</strong> {q.explanation}
                                </div>
                            )}
                        </div>
                    ))}
                </div>

                <div className="mt-8 p-6 bg-white rounded-lg shadow-md">
                    <h2 className="text-2xl font-bold mb-4">Your Score</h2>
                    <p className="text-lg">
                        You got <span className="font-bold text-blue-600">{getScore()}</span> out of {questions.length} questions correct!
                    </p>
                </div>
            </div>
        </div>
    );
}